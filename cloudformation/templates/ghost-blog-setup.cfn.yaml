AWSTemplateFormatVersion: 2010-09-09
Description: Configure the Ghost blog host

# inception.cfn.yaml template should be deployed before this template
# as it creates the VPC and the rest of the networking resources.

Parameters:
  # Fetch the latest AMI without hard-coding the image id
  LatestAmiId:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'

Resources:
  # SSM to manage the Ghost host
  MyGhostHostManagementRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: 
              - ec2.amazonaws.com
            Action: 
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore

  MyGhostHostInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles: 
        - !Ref MyGhostHostManagementRole

  MyGhostHostInstance:
    Type: AWS::EC2::Instance
    Metadata:
      Comment: Install docker, ghost and traefik
      AWS::CloudFormation::Init:
        config:
          files:
            "/data/traefik/docker-compose.yaml":
              content: !Sub |
                version: '3'

                services:
                  reverse-proxy:
                    # The official v2 Traefik docker image
                    image: traefik:alpine
                    # Enables the web UI and tells Traefik to listen to docker
                    command: --api.insecure=true --providers.docker
                    ports:
                      # The HTTP port
                      - "80:80"
                      # The Web UI (enabled by --api.insecure=true)
                      - "8080:8080"
                    volumes:
                      # So that Traefik can listen to the Docker events
                      - /var/run/docker.sock:/var/run/docker.sock
              mode: '000644'
              owner: root
              group: root

          commands:
            "1":
              command: "sudo yum update -y"
            "2":
              command: "yes | sudo amazon-linux-extras install docker"
            "3":
              command: "sudo service docker start"
            "4":
              command: "sudo usermod -a -G docker ec2-user"
            "5":
              command: "sudo yum install -y git"
            "6":
              command: "curl -L https://github.com/docker/compose/releases/download/1.25.4/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose"
            "7":
              command: "chmod +x /usr/local/bin/docker-compose" 
            "8":
              command: "docker-compose up -d"
              cwd: "/data/traefik/"

    Properties:
      IamInstanceProfile: !Ref MyGhostHostInstanceProfile
      InstanceType: t2.micro
      ImageId: !Ref LatestAmiId
      NetworkInterfaces: 
        - AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          GroupSet:
            - Fn::ImportValue: PRIMARY-GHOST-SG
          SubnetId: 
            Fn::ImportValue: PRIMARY-GHOST-SUBNET
      Tags:
        - Key: Name
          Value: Ghost Blog Host Instance
      UserData:
        "Fn::Base64":
          !Sub |
            #!/bin/bash -xe
            # Get the latest CloudFormation package
            yum update -y aws-cfn-bootstrap
            # Start cfn-init
            /opt/aws/bin/cfn-init -s ${AWS::StackId} -r MyGhostHostInstance --region ${AWS::Region} || error_exit 'Failed to run cfn-init'
            # Start up the cfn-hup daemon to listen for changes to the EC2 instance metadata            
            /opt/aws/bin/cfn-hup || error_exit 'Failed to start cfn-hup'
            # All done so signal success
            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackId} --resource MyGhostHostInstance --region ${AWS::Region}

Outputs:
  InstanceId:
    Description: The instance ID of the ghost server
    Value:
      Ref: MyGhostHostInstance
  PublicIP:
    Description: Public IP address of the ghost server
    Value:
      !GetAtt MyGhostHostInstance.PublicIp
