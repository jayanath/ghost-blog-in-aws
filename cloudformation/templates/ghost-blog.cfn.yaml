# Let's use this to declare what we want in our stack
Parameters:
  VpcCidr: 
    Type: String
    Default: 192.168.0.0/16
  LatestAmiId:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'

Resources:
  MyGhostVPC:
    Type: AWS::EC2::VPC
    Properties: 
      CidrBlock: !Ref VpcCidr
      Tags: 
        - Key: name
          Value: Ghost Blog VPC

  MyGhostSubnet:
    Type: AWS::EC2::Subnet
    Properties: 
      VpcId: !Ref MyGhostVPC
      CidrBlock: !Ref VpcCidr
      Tags: 
        - Key: name
          Value: Ghost Blog Subnet

  MyGhostSG:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: SecurityGroup for the Ghost Blog
      GroupName: MyGhostSG
      VpcId: !Ref MyGhostVPC
      SecurityGroupIngress: 
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - FromPort: '443'
          IpProtocol: tcp
          ToPort: '443'
          CidrIp: 0.0.0.0/0  
      Tags: 
        - Key: name
          Value: Ghost Blog SG

  MyGhostNACL:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref MyGhostVPC
      Tags:
      - Key: name
        Value: Ghost Blog NACL

  MyGhostNACLEntry:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref MyGhostNACL
      RuleNumber: '100'
      Protocol: "-1"
      RuleAction: allow
      Egress: 'true'
      CidrBlock: !Ref VpcCidr

  MyGhostIGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: name
        Value: Ghost Blog InternetGateway

  MyGhostVpcIGWAttachment:
      Type: "AWS::EC2::VPCGatewayAttachment"
      Properties:
        InternetGatewayId: !Ref MyGhostIGW
        VpcId: !Ref MyGhostVPC

  MyGhostRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyGhostVPC 
      Tags:
      - Key: name
        Value: Ghost Blog RouteTable

  MyGhostRouteToIGW:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref MyGhostRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref MyGhostIGW
  
  MyGhostSubnetToRoutTableAss:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref MyGhostRouteTable
      SubnetId: !Ref MyGhostSubnet

  MyGhostHostManagementRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: 
              - ec2.amazonaws.com
            Action: 
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore

  MyGhostHostInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles: 
        - !Ref MyGhostHostManagementRole

  MyGhostHostInstance:
    Type: AWS::EC2::Instance
    Properties:
      IamInstanceProfile: !Ref MyGhostHostInstanceProfile
      InstanceType: t2.micro
      ImageId: !Ref LatestAmiId
      NetworkInterfaces: 
        - AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          GroupSet:
            - !Ref MyGhostSG
          SubnetId: !Ref MyGhostSubnet
      Tags:
        - Key: Name
          Value: Ghost Blog Host Instance

